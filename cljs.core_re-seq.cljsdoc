===== Example#827180

```
user=> (re-seq #"\d" "clojure 1.1.0")
("1" "1" "0")

```

===== Example#3ba80d

```
;; Get a sequence of words out of a string.
user=> (re-seq #"\w+" "mary had a little lamb")
("mary" "had" "a" "little" "lamb")

```

===== Example#6037f7

```
;; Parenthesized groups in the regex cause each returned match to be a
;; vector of matched strings.  See re-find for more examples.
user=> (def line " RX pkts:18 err:5 drop:48")
#'user/line

user=> (re-seq #"(\S+):(\d+)" line)
(["pkts:18" "pkts" "18"] ["err:5" "err" "5"] ["drop:48" "drop" "48"])

```

===== Example#a3fe35

```
;; Note: See clojure.core/subs for discussion of behavior of substrings
;; holding onto references of the original strings, which can
;; significantly affect your memory usage in some cases.
```
