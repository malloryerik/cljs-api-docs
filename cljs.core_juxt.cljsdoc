===== Example#dd74f7

```
;; Extract values from a map, treating keywords as functions.
((juxt :a :b) {:a 1 :b 2 :c 3 :d 4})
;;=> [1 2]

```

===== Example#dd74f7

```
;; "Explode" a value.

((juxt identity name) :keyword)
;;=> [:keyword "keyword"]


;; eg. to create a map:

(into {} (map (juxt identity name) [:a :b :c :d]))
;;=> {:a "a" :b "b" :c "c" :d "d"}

```

===== Example#dd74f7

```
;; Get the first character and length of string

((juxt first count) "Clojure Rocks")
;;=> [\C 13]

```

===== Example#dd74f7

```
;; sort list of maps by multiple values
(sort-by (juxt :a :b) [{:a 1 :b 3} {:a 1 :b 2} {:a 2 :b 1}]
;;=> [{:a 1 :b 2} {:a 1 :b 3} {:a 2 :b 1}]
```

===== Example#dd74f7

```
;; Create lookup maps via a specific key

(defn index-by [coll key-fn]
    (into {} (map (juxt key-fn identity) coll)))
;; #'user/index-by

(index-by [{:id 1 :name "foo"} 
           {:id 2 :name "bar"} 
           {:id 3 :name "baz"}] :id)
;;=> {1 {:name "foo", :id 1}, 
;;    2 {:name "bar", :id 2}, 
;;    3 {:name "baz", :id 3}}

(index-by [{:id 1 :name "foo"} 
           {:id 2 :name "bar"} 
           {:id 3 :name "baz"}] :name)
;;=> {"foo" {:name "foo", :id 1}, 
;;    "bar" {:name "bar", :id 2}, 
;;    "baz" {:name "baz", :id 3}}

```

===== Example#dd74f7

```
((juxt + * min max) 3 4 6)
;;=> [13 72 3 6]
```
