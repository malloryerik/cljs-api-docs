===== Example#4bee54

```
(def users [{:name "James" :age 26}  {:name "John" :age 43}])

;; update the age of the second (index 1) user 
(assoc-in users [1 :age] 44)
;;=> [{:name "James", :age 26} {:name "John", :age 44}]

;; insert the password of the second (index 1) user
(assoc-in users [1 :password] "nhoJ")
;;=> [{:name "James", :age 26} {:password "nhoJ", :name "John", :age 43}]

;; create a third (index 2) user
;; Also (assoc m 2 {...}) or (conj m {...})
(assoc-in users [2] {:name "Jack" :age 19})  
;;=> [{:name "James", :age 26} {:name "John", :age 43} {:name "Jack", :age 19}]

;; From http://clojure-examples.appspot.com/clojure.core/assoc-in
```

===== Example#40f2d8

```
;; can be used to update a mutable item.
def ppl (atom {"persons" {"joe" {:age 1}}}))
(swap! ppl assoc-in ["persons" "bob"] {:age 11})

@ppl
;;=> {"persons" {"joe" {:age 1}, "bob" {:age 11}}}
```

===== Example#7014ec

```
;; be careful with that empty path sequence, it's seldom what you want
(assoc-in {} [] {:k :v})
;;=> {nil {:k :v}}
```

===== Example#cf7420

```
;; another example of updating a mutable item.
;; this time the first key is to a map and the second to a vector.
(def foo (atom {:users [{:a "a"} {:b "b"}]}))
(swap! foo assoc-in [:users 2] {:c "c"})
;;=> {:users [{:a "a"} {:b "b"} {:c "c"}]}


```
