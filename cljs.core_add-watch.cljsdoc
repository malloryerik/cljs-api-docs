===== Example#6912aa

```
;; Add useful context to watcher function:
(defn watch-agent [_agent context]
    (let [watch-fn (fn [_context _key _ref old-value new-value] ;...
               )] 
        (add-watch _agent nil (partial watch-fn context))))

```

===== Example#c055dc

```
;; timing of agent actions and watches using nrepl (ymmv)
user> (def a (agent 0))
#'user/a
user> a
#<Agent@2bd9c3e7: 0>
user> (add-watch a :key (fn [k r os ns] (print k r os ns)))
#<Agent@2bd9c3e7: 0>
user> (send a inc)
:key #<Agent@2bd9c3e7: 1> 0 1
#<Agent@2bd9c3e7: 1>
user> a
:key #<Agent@2bd9c3e7: 2> 1 2
#<Agent@2bd9c3e7: 2>

```

===== Example#b084f2

```
(def a (atom {}))

(add-watch a :watcher
  (fn [key atom old-state new-state]
    (prn "-- Atom Changed --")
    (prn "key" key)
    (prn "atom" atom)
    (prn "old-state" old-state)
    (prn "new-state" new-state)))

(reset! a {:foo "bar"})

;; "-- Atom Changed --"
;; "key" :watcher
;; "atom" #<Atom@4b020acf: {:foo "bar"}>
;; "old-state" {}
;; "new-state" {:foo "bar"}
;; {:foo "bar"}
```

===== Example#56b5d0

```
;; The name of my account can change, and I want to update another atom accordingly.
;; I just take the fourth argument that contains the new state and I ignore the other arguments.

(let [account (atom {:name "pending" 
                     :funds 100.50 
                     :profit-loss 23.45})
      label-account-name (atom "no-name-yet")]
   (add-watch account :listener-one #(reset! label-account-name (:name %4)))
   (println "Before swap:" @label-account-name)
   (swap! account assoc :name "CFD")
   (println "After swap:" @label-account-name))

;; Before swap: no-name-yet
;; After swap: CFD
```
