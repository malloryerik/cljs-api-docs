===== Example#c63f57

```
;; these two functions are equivalent 

(take 5 (repeatedly #(rand-int 11)))
;;=> (6 6 3 9 8)

;; this version only returns the first five elements
(repeatedly 5 #(rand-int 11))
;;=> (1 8 6 9 6)

;; compare with repeat, which
;; only calls the 'rand-int' function once,
;; repeating the value five times.
(repeat 5 (rand-int 100))
(94 94 94 94 94)
```

===== Example#c63f57

```
(defn counter []  
  (let [tick (atom 0)]
    #(swap! tick inc)))

(def tick (counter))

(take 10 (repeatedly tick))
;;=> (1 2 3 4 5 6 7 8 9 10)

;; or equivalently
(repeatedly 10 (counter))
;;=> (1 2 3 4 5 6 7 8 9 10)
```
